name: DevOps Pipeline CI/CD

on:
  push:
    branches: [main, master, develop, feature/ci-cd-pipeline]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs: # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0' # Don't fail the pipeline on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
  # Build and Test Frontend
  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
  # Build and Test Backend
  backend-build:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package.json'

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run tests (if available)
        run: |
          cd backend
          npm test --if-present

  # Docker Build and Push
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker images for vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: devops_app
          POSTGRES_USER: devops_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file for testing
        run: |
          cp env.example .env
          sed -i 's/secure_password_123/test_password/' .env

      - name: Run Docker Compose
        run: |
          docker-compose up -d --build
          sleep 30

      - name: Run health checks
        run: |
          curl -f http://localhost:3000/health || exit 1
          curl -f http://localhost:5000/health || exit 1

      - name: Check Prometheus metrics
        run: |
          curl -f http://localhost:9090/-/healthy || exit 1

      - name: Stop services
        run: docker-compose down

  # Deployment (only on main/master branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy with Ansible (Simulation)
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Running Ansible deployment playbook..."
          # In real scenario, you would run:
          # ansible-playbook -i inventory/production ansible/playbooks/deploy.yml
          echo "‚úÖ Deployment completed successfully!"

      - name: Send notification
        run: |
          echo "üì¢ Deployment notification sent to team"
          # In real scenario, you would send to Slack, Teams, etc.

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Monitor deployment
        run: |
          echo "üîç Running post-deployment health checks..."
          echo "‚úÖ All services are healthy"
          echo "üìä Monitoring dashboards updated"
